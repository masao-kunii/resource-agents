#!/bin/sh
#
# Description: Manages a JBoss A-MQ an OCF High-Availability
# resource under Heartbeat/LinuxHA control
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
# 
# Copyright (C) 2013  Masao Kunii
# 
#######################################################################

# Initialization:

: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}

#######################################################################

meta_data()
{
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="amq">
<version>1.0</version>

<longdesc lang="en">
Resource script for JBoss A-MQ. It manages a JBoss A-MQ instance as an HA resource.
</longdesc>
<shortdesc lang="en">Manages a JBoss A-MQ server instance</shortdesc>

<parameters>

<parameter name="resource_name" unique="1" required="0">
<longdesc lang="en">
The name of the resource. Defaults to the name of the resource
instance.
</longdesc>
<shortdesc>The name of the resource</shortdesc>
<content type="string" default="${OCF_RESOURCE_INSTANCE}" />
</parameter>

<parameter name="shutdown_timeout" unique="0" required="0">
<longdesc lang="en">
Timeout for JBoss A-MQ bin/stop. We wait for this timeout to
expire, then send the TERM and QUIT signals. Finally, the KILL
signal is used to terminate the JBoss A-MQ process. You should set the
timeout for the stop operation to a value bigger than the sum of
the timeout parameters. See also kill_timeout.
</longdesc>
<shortdesc>shutdown timeout</shortdesc>
<content type="integer" default="5" />
</parameter>

<parameter name="kill_timeout" unique="0" required="0">
<longdesc lang="en">
If bin/shutdown.sh doesn't stop the jboss process, then we send
it TERM and QUIT signals, intermittently and once a second. After
this timeout expires, if the process is still live, we use the
KILL signal. See also shutdown_timeout.
</longdesc>
<shortdesc>stop by signal timeout</shortdesc>
<content type="integer" default="10" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
A user name to start a JBoss A-MQ.
</longdesc>
<shortdesc>A user name to start a resource.</shortdesc>
<content type="string" default="root"/>
</parameter>

<parameter name="statusurl" unique="0" required="0">
<longdesc lang="en">
URL to test in the monitor operation.
</longdesc>
<shortdesc>URL to test in the monitor operation.</shortdesc>
<content type="string" default="${OCF_RESKEY_statusurl_default}" />
</parameter>

<parameter name="java_home" unique="0" required="0">
<longdesc lang="en">
Home directory of Java. Defaults to the environment variable
JAVA_HOME. If it is not set, then define this parameter.
</longdesc>
<shortdesc>Home directory of Java.</shortdesc>
<content type="string" default="$JAVA_HOME"/>
</parameter>

<parameter name="java_opts" unique="0" required="0">
<longdesc lang="en">
Java options.
</longdesc>
<shortdesc>Java options.</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="amq_home" unique="0" required="1">
<longdesc lang="en">
Home directory of JBoss A-MQ.
</longdesc>
<shortdesc>Home directory of JBoss A-MQ.</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="pstring" unique="0" required="0">
<longdesc lang="en">
With this string heartbeat matches for the right process to kill.
</longdesc>
<shortdesc>pkill/pgrep search string</shortdesc>
<content type="string" default="${OCF_RESKEY_pstring_default}" />
</parameter>

<parameter name="run_command" unique="0" required="0">
<longdesc lang="en">
JBoss start command.
</longdesc>
<shortdesc>JBoss A-MQ start command.</shortdesc>
<content type="string" default="${OCF_RESKEY_run_command_default}" />
</parameter>

<parameter name="run_opts" unique="0" required="0">
<longdesc lang="en">
Start options to start Jboss with.
</longdesc>
<shortdesc>options for amq start</shortdesc>
<content type="string" default="${OCF_RESKEY_run_opts_default}" />
</parameter>

<parameter name="shutdown_opts" unique="0" required="0">
<longdesc lang="en">
Stop options to stop JBoss A-MQ with.
</longdesc>
<shortdesc>options for JBoss A-MQ stop</shortdesc>
<content type="string" default="-s 127.0.0.1:1099" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="60s" />
<action name="stop" timeout="120s" />
<action name="status" timeout="30s" />
<action name="monitor" depth="0" timeout="30s" interval="10s" />
<action name="meta-data" timeout="5s" />
<action name="validate-all" timeout="5s"/>
</actions>
</resource-agent>
END
    return $OCF_SUCCESS

}

amq_usage()
{
    cat <<-!
usage: $0 action

action:
        start start A-MQ

        stop stop the A-MQ

        status return the status of A-MQ, run or down

        monitor return TRUE if the amq appears to be working.
                 You have to have installed $WGETNAME for this to work.

        meta-data show meta data message

        validate-all validate the instance parameters
!
    return $OCF_ERR_ARGS
}

amq_start() {
    ocf_log info "JBoss A-MQ [$RESOURCE_NAME] is started."
    return $OCF_SUCCESS
}

amq_stop() {
    return 0
}

amq_monitor() {
    return $OCF_SUCCESS
}

amq_validate() {
    return $OCF_SUCCESS
}

isrunning_amq()
{
    amq_status
}


amq_status()
{
    if ! pgrep -f "$PSTRING" > /dev/null; then
        echo "JBoss A-MQ process [$RESOURCE_NAME] is not running."
        return $OCF_NOT_RUNNING
    fi

    if isrunning_amq; then
        echo "JBoss A-MQ process [$RESOURCE_NAME] is running."
        return $OCF_SUCCESS
    else
        echo "JBoss A-MQ process [$RESOURCE_NAME] is running."
        echo "But, we can not access JBoss A-MQ."
        return $OCF_NOT_RUNNING
    fi
}

amq_validate_all()
{
    if [ ! -d "$JAVA_HOME" ]; then
        ocf_log err "JAVA_HOME does not exist."
        return $OCF_ERR_INSTALLED
    fi

    if [ ! -d "$AMQ_HOME" ]; then
        ocf_log err "AMQ_HOME does not exist."
        return $OCF_ERR_INSTALLED
    fi

    if [ ! -x "$JAVA" ]; then
        ocf_log err "java command does not exist."
        return $OCF_ERR_INSTALLED
    fi

    return $OCF_SUCCESS
}

COMMAND=$1
# Setting of the default value
OCF_RESKEY_statusurl_default="http://localhost:8181/activemqweb"
OCF_RESKEY_pstring_default="org.apache.karaf.main.Main"
OCF_RESKEY_run_command_default="/opt/amq/current/bin/start"

JAVA_HOME=/usr/lib/jvm/jre-1.7.0-openjdk.x86_64
AMQ_HOME=/opt/jboss-amq

RESOURCE_NAME="${OCF_RESKEY_resource_name-${OCF_RESOURCE_INSTANCE}}"
CONSOLE="${OCF_RESKEY_console-/opt/jboss-amq/data/${RESOURCE_NAME}.log}"
SHUTDOWN_TIMEOUT="${OCF_RESKEY_shutdown_timeout-5}"
KILL_TIMEOUT="${OCF_RESKEY_kill_timeout-10}"
AMQ_USER="${OCF_RESKEY_user-root}"
STATUSURL="${OCF_RESKEY_statusurl-${OCF_RESKEY_statusurl_default}}"
PSTRING="${OCF_RESKEY_pstring-${OCF_RESKEY_pstring_default}}"

RUN_OPTS="${OCF_RESKEY_run_opts-${OCF_RESKEY_run_opts_default}}"
SHUTDOWN_OPTS="${OCF_RESKEY_shutdown_opts--s 127.0.0.1:1099}"
RUN_COMMAND="${OCF_RESKEY_run_command-${OCF_RESKEY_run_command_default}}"

if [ $# -ne 1 ]; then
    usage
    exit $OCF_ERR_ARGS
fi

if [ "$COMMAND" = "meta-data" ]; then
    meta_data
    exit $OCF_SUCCESS
fi

if [ "$COMMAND" = "help" -o "$COMMAND" = "usage" ]; then
    usage
    exit $OCF_SUCCESS
fi

LSB_STATUS_STOPPED=3

export JAVA_HOME JAVA_OPTS AMQ_HOME

JAVA=${JAVA_HOME}/bin/java

amq_validate_all
rc=$?

[ "$COMMAND" = "validate-all" ] && exit $rc

if [ $rc -ne 0 ]; then
case $COMMAND in
        stop) exit $OCF_SUCCESS;;
        monitor) exit $OCF_NOT_RUNNING;;
        status) exit $LSB_STATUS_STOPPED;;
        *) exit $rc;;
    esac
fi


case "$COMMAND" in
    meta-data)
        meta_data
        exit $OCF_SUCCESS
        ;;
    start)
        amq_start
        func_status=$?
        exit $func_status
        ;;
    stop)
        amq_stop
        func_status=$?
        exit $func_status
        ;;
    status)
        amq_status
        exit $?
        ;;
    monitor)
        amq_monitor
        func_status=$?
        exit $func_status
        ;;
    validate-all)
        amq_validate_all
        exit $?
        ;;
    *)
        amq_usage
        exit $OCF_ERR_UNIMPLEMENTED;;
esac

